#include "Functions\warlords_constants.inc"
#include "ui\defines.hpp"
#include "ui\controls.hpp"


onLoadName = "Warlords Redux 2.5"; 
dev = "Jezuro + WSV";
author = "Jezuro + WSV";

respawn = 3;
respawnDelay = 30;
respawnOnStart = -1;

disabledAI = 1;


/*******************************START CUSTOM CONTENT HERE****************************/

enableDebugConsole = 1;

//revive settings below
ReviveMode = 0;                         //0: disabled, 1: enabled, 2: controlled by player attributes
ReviveUnconsciousStateMode = 0;         //0: basic, 1: advanced, 2: realistic
ReviveRequiredTrait = 0;                //0: none, 1: medic trait is required
ReviveRequiredItems = 2;                //0: none, 1: medkit, 2: medkit or first aid kit
ReviveRequiredItemsFakConsumed = 1;     //0: first aid kit is not consumed upon revive, 1: first aid kit is consumed
ReviveDelay = 15;                        //time needed to revive someone (in secs)
ReviveMedicSpeedMultiplier = 2;         //speed multiplier for revive performed by medic
ReviveForceRespawnDelay = 3;            //time needed to perform force respawn (in secs)
ReviveBleedOutDelay = 180;              //unconscious state duration (in secs)
//end of revive section 

class Header
{
	gameType = Warlords;
	minPlayers = 1;
	maxPlayers = 100;
};

class CfgRemoteExec {
	class Functions {
		mode = 2;
		jip = 1;

		class WL2_fundsDatabaseWrite {
			allowedTargets = 2;
		};
	};
};

class CfgDisabledCommands {
	class  SETDAMAGE {
		class SYNTAX1
		{
			targets[] = {1,0,0};
			args[] = {{"OBJECT"},{"SCALAR","ARRAY"}};
		};
	};
	class  SETDAMMAGE {
		class SYNTAX1
		{
			targets[] = {0,0,0};
			args[] = {{"OBJECT"},{"SCALAR"}};
		};
	};
	class SETPOS
	{
		class SYNTAX1
		{
			targets[] = {1,0,0};
			args[] = {{"OBJECT"},{"ARRAY"}};
		};
	};
	class SETPOSASL
	{
		class SYNTAX1
		{
			targets[] = {1,0,0};
			args[] = {{"OBJECT"},{"ARRAY"}};
		};
	};
	class SETPOSASLW
	{
		class SYNTAX1
		{
			targets[] = {1,0,0};
			args[] = {{"OBJECT"},{"ARRAY"}};
		};
	};
	class SETPOSATL
	{
		class SYNTAX1
		{
			targets[] = {1,0,0};
			args[] = {{"OBJECT"},{"ARRAY"}};
		};
	};
	class SETPOSWORLD
	{
		class SYNTAX1
		{
			targets[] = {1,0,0};
			args[] = {{"OBJECT"},{"ARRAY"}};
		};
	};
	class SETVEHICLEPOSITION
	{
		class SYNTAX1
		{
			targets[] = {1,0,0};
			args[] = {{"OBJECT"},{"ARRAY"}};
		};
	};
	class CREATEUNIT
	{
		class SYNTAX1
		{
			targets[] = {1,0,0};
			args[] = {{"STRING"},{"ARRAY"}};
		};

		class SYNTAX2
		{
			targets[] = {1,0,0};
			args[] = {{"GROUP"},{"ARRAY"}};
		};
	};
	class SETVELOCITY
	{
		class SYNTAX1
		{
			targets[] = {1,0,0};
			args[] = {{"OBJECT"},{"ARRAY"}};	
		};
	}; 
};

allowFunctionsLog = 1;
class CfgFunctions {
	class BIS
	{
    	class Client 
		{
    		file = "Functions\client";
			class WL2_mrtmConvo {ext = ".fsm";};
			class WL2_cpBalance {};
    		class WL2_announcer {};
			class WL2_assetMapControl {};
			class WL2_forceGroupIconsFunctionality {};
			class WL2_friendlyFireHandleClient {};
			class WL2_groupIconClickHandle {};
			class WL2_groupIconEnterHandle {};
			class WL2_groupIconLeaveHandle {};
			class WL2_handleEnemyCapture {};
			class WL2_hintHandle {};
			class WL2_initClient {};
			class WL2_mapControlHandle {};
			class WL2_onPause {};
			class WL2_orderAircraft {};
			class WL2_orderArsenal {};
			class WL2_orderDefence {};
			class WL2_orderFastTravel {};
			class WL2_orderVehicle {};
			class WL2_orderFundsTransfer {};
			class WL2_orderLastLoadout {};
			class WL2_orderNaval {};
			class WL2_orderSavedLoadout {};
			class WL2_orderSectorScan {};
			class WL2_purchaseMenuOpeningHandle {};
			class WL2_refreshCurrentTargetData {};
			class WL2_refreshIconsToDraw {};
			class WL2_refreshOSD {};
			class WL2_requestPurchase {};
			class WL2_sceneDrawHandle {};
			class WL2_sectorCaptureStatus {};
			class WL2_sectorMarkerUpdate {};
			class WL2_sectorRevealHandle {};
			class WL2_sectorSelectionHandle {};
			class WL2_sectorsInitClient {};
			class WL2_sectorOwnershipHandleClient {};
			class WL2_selectedTargetsHandle {};
			class WL2_setOSDEvent {};
			class WL2_setupUI {};
			class WL2_sideToFaction {};
			class WL2_smoothText {};
			class WL2_targetResetHandle {};
			class WL2_targetSelected {};
			class WL2_targetSelectionHandleClient {};
			class WL2_teammatesAvailability {};
			class WL2_zoneRestrictionHandleClient {};
			class WL2_timer {};
			class WL2_orderFTVehicleFT {};
			class WL2_orderFTVehicle {};
			class WL2_welcome {};
			class WL2_displayCPtransfer {};
			class WL2_betty {};
			class WL2_rita {};
			class WL2_mapIcons {};
			class WL2_fundsControl {};
			class WL2_vehicleRearm {};
			class WL2_forfeitHandle {};
			class WL2_orderForfeit {};
			class WL2_killRewardClient {};
			class WL2_underWaterCheck {};
			class WL2_mrtmAction {};
    	};
		class Server 
		{
    		file = "Functions\server";
    		class WL2_assetRelevanceCheck {ext = ".fsm";};
			class WL2_incomePayoff {ext = ".fsm";};
			class WL2_chatMsg {ext = ".fsm";};
			class WL2_detectNewPlayers {};
			class WL2_friendlyFireHandleServer {};
			class WL2_changeSectorOwnership {};
			class WL2_initServer {};
			class WL2_loadFactionClasses {};
			class WL2_mineLimit {};
			class WL2_populateSector {};
			class WL2_processRunways {};
			class WL2_sectorsInitServer {};
			class WL2_selectTarget {};
			class WL2_setupNewWarlord {};
			class WL2_targetResetHandleServer {};
			class WL2_targetSelectionHandleServer {};
			class WL2_zoneRestrictionHandleServer {};
			class WL2_killRewardHandle {};
			class WL2_fundsDatabaseWrite {};
			class WL2_fundsDatabaseUpdate {};
			class WL2_tablesSetUp {};
			class WL2_handleClientRequest {};
			class WL2_forfeitHandleServer {};
    	};
    	class Common {
    		file = "Functions\common";
    		class WL2_findSpawnPositions {};
			class WL2_generateVariableName {};
			class WL2_getRespawnMarkers {};
			class WL2_getSideBase {};
			class WL2_handleRespawnMarkers {};
			class WL2_income {};
			class WL2_initCommon {};
			class WL2_missionEndHandle {};
			class WL2_newAssetHandle {};
			class WL2_parsePurchaseList {};
			class WL2_playersListHandle {};
			class WL2_respawnHandle {};
			class WL2_sectorScanHandle {};
			class WL2_sortSectorArrays {};
			class WL2_syncedTime {};
			class WL2_updateSectorArrays {};
			class WL2_varsInit {};
			class WL2_setAssist {};
			class WL2_calcImbalance {};
    	};
		class Subroutines 
		{
    		file = "Functions\subroutines";
    		class WL2_sub_arsenalSetup {};
			class WL2_sub_assetAssemblyHandle {};
			class WL2_sub_deleteAsset {};
			class WL2_sub_purchaseMenuAssetAvailability {};
			class WL2_sub_purchaseMenuGetUIScale {};
			class WL2_sub_purchaseMenuHandleDLC {};
			class WL2_sub_purchaseMenuRefresh {};
			class WL2_sub_purchaseMenuSetAssetDetails {};
			class WL2_sub_purchaseMenuSetItemsList {};
			class WL2_sub_vehicleLockAction {};
			class WL2_sub_logisticsAddAction {};
			class WL2_sub_dazzlerAction {};
			class WL2_sub_rearmAction {};
			class WL2_sub_vehicleKickAction {};
    	};
	};

/*******************************START OF CUSTOM CONTENT HERE****************************/
	class MRTM {
		class Init {
			file = "scripts\MRTM_settings";
			class settingsMenu {
				ext = ".fsm";
				postInit = 1;
				headerType = -1;
			};
			class onSliderChanged {};
			class updateViewDistance {};
			class openMenu {};
			class onChar {};
		};
	};
	class GOM {
		class init
		{
			file = "scripts\GOM\functions";
			class aircraftLoadoutParameters {preInit = 1;};
			class aircraftLoadoutInit {preInit = 1;};
		};
	};
	class KS
	{	
		class normalFunctions
		{
			file = "scripts\VUnflip\functions";	// Folder where all functions are.
			class unflipVehicle {};
		};
	};		

	class KSLOOP
	{
		class spawnThese //Seriously "spawn" these, do not "call" them!
		{
			file = "scripts\VUnflip\functions\loops";
			class unflipVehicleAddAction {};
		};
		
	};	
	class DAPS
	{
		class APS 
		{
			file = "scripts\DAPS\Scripts\APS";
			class APSDazzler {};
			class APSheavy {};
			class APSlight {};
			class APSmedium {};
			class Dazzler {};
			class Generic {};
		};
		class Management
		{
			file = "scripts\DAPS\Scripts\Management";
			class AssignAPS {};
			class BroadcastTypes {};
			class KeyPressed {};
			class RearmAPS {};
			class RegisterVehicle {};
			class CompileTypes {};
		};
		class MISC
		{
			file = "scripts\DAPS\Scripts\Misc";
			class Active {};
			class Blast {};
			class CanSmoke {};
			class CountAmmo {};
			class DeductAmmo {};
			class GetDirection {};
			class HasCharges {};
			class IsIRguided {};
			class IsLaserGuided {};
			class IsRadarGuided {};
			class IsVisualGuided {};
			class MisguideMissile {};
			class popSmoke {};
			class PopSmoke2 {};
			class PopSmokeTurn {};
			class React {};
			class RearmCheck {};
			class RelDir2 {};
			class RelPos {};
		};
		class Report
		{
			file = "scripts\DAPS\Scripts\Report";
			class Report {};
			class ReportRearm {};
		};
	};
	class DIS
	{
		class SAM {
			file = "scripts\DIS\SAM";
			class getOwner {};
			class Frag {};
			class IsSam {};
			class RegisterSAM {};
			class SAMmaneuver {};
			class SAMfired {};
		};
	};
};


class CfgCommunicationMenu
{
	class GOM_aircraftLoadoutMenu
	{
		text = "Aircraft Loadout Module";
		submenu = "";
		expression = "[player] spawn GOM_fnc_aircraftLoadout"; // Code executed upon activation
		icon = "\a3\Ui_f\data\gui\Cfg\CommunicationMenu\call_ca.paa"; // Icon displayed permanently next to the command menu
		cursor = "\a3\Ui_f\data\gui\Cfg\CommunicationMenu\call_ca.paa"; // Custom cursor displayed when the item is selected
		enable = "1"; // Simple expression condition for enabling the item
		removeAfterExpressionCall = 0; // 1 to remove the item after calling
	};
};

class RscTitles
{
	#include "scripts\GF_Earplugs\GF_Earplugs_HPP.hpp"	
};

#include "scripts\GOM\dialogs\GOM_dialog_parents.hpp"
#include "scripts\GOM\dialogs\GOM_dialog_controls.hpp"

/*******************************END OF CUSTOM CONTENT HERE****************************/

//onPauseScript[] = {BIS_fnc_WL2_onPause};

#include "requisitions.inc"

corpseManagerMode = 1;
corpseLimit = 50;
corpseRemovalMinTime = 300;
corpseRemovalMaxTime = 1500; //1800

wreckManagerMode = 1;
wreckLimit = 32; //50
wreckRemovalMinTime = 120; //60
wreckRemovalMaxTime = 240; //120

minPlayerDistance = WL_ASSET_REMOVAL_SAFEZONE;

class CfgSounds {
	//playSoundUI ["class", 1, 1];

	class altWarning {
        name="altitude warning";
        sound[]={"sounds\altSound.ogg", 1, 1};
        titles[] = {};	
	};

	class pullUp {
        name="Pull up";
        sound[]={"sounds\pullUpSound.ogg", 1, 1};
        titles[] = {};	
	};

	class bingoFuel {
        name="Fuel low";
        sound[]={"sounds\bingoSound.ogg", 1, 1};
        titles[] = {};	
	};
	
	class radarLock {
        name="Visible on radar";
        sound[]={"sounds\onSensorSound.ogg", 1, 1};
        titles[] = {};	
	};	

	class radarTargetNew {
        name="New radar target";
        sound[]={"sounds\newTargetSound.ogg", 1, 1};
        titles[] = {};	
	};	

	class radarTargetLost {
        name="Lost radar target";
        sound[]={"sounds\lostTargetSound.ogg", 1, 1};
        titles[] = {};	
	};

	class pullUpRita {
        name="Pull up rita";
        sound[]={"sounds\AngleOfAttackOverLimit.ogg", 1, 1};
        titles[] = {};
	};

	class altRita {
        name="Alt rita";
		sound[]={"sounds\PullUp.ogg", 1, 1};
        titles[] = {};
	};

	class sensorRita {
        name="sensorWarning rita";
        sound[]={"sounds\sensorWarning.ogg", 1, 1};
        titles[] = {};
	};

	class fuelRita {
        name="fuel low rita";
        sound[]={"sounds\BingoFuel.ogg", 1, 1};
        titles[] = {};
	};

	class incMissile_0 {
        name="incomming 0";
        sound[]={"sounds\critical_missile12.ogg", 1, 1};
        titles[] = {};		
	};

	class incMissile_90 {
        name="incomming 90";
        sound[]={"sounds\critical_missile03.ogg", 1, 1};
        titles[] = {};
	};

	class incMissile_180 {
        name="incomming 180";
        sound[]={"sounds\critical_missile06.ogg", 1, 1};
        titles[] = {};
	};

	class incMissile_270 {
        name="incomming 270";
        sound[]={"sounds\critical_missile09.ogg", 1, 1};
        titles[] = {};
	};

	class incMissileRuss_0 {
        name="incomming 0";
        sound[]={"sounds\critical_missileRuss12.ogg", 1, 1};
        titles[] = {};		
	};

	class incMissileRuss_90 {
        name="incomming 90";
        sound[]={"sounds\critical_missileRuss03.ogg", 1, 1};
        titles[] = {};
	};

	class incMissileRuss_180 {
        name="incomming 180";
        sound[]={"sounds\critical_missileRuss06.ogg", 1, 1};
        titles[] = {};
	};

	class incMissileRuss_270 {
        name="incomming 270";
        sound[]={"sounds\critical_missileRuss09.ogg", 1, 1};
        titles[] = {};
	};
};

class CfgHints
{
	class common
	{
		displayName = "Common Controls";

		class warlordsMenu
		{
			displayName = $STR_A3_WL_Menu_Hint_Name;
			displayNameShort = "";
			description = $STR_A3_WL_Menu_Hint;
			tip = $STR_A3_WL_Menu_Hint_01;
			arguments[] =
			{
				{{"Gear"}},
				"format [localize 'STR_A3_WL_tip_menu', (actionKeysNamesArray 'Gear') # 0]"
			};
			image = "img\wl_logo_ca.paa";
			noImage = false;
		};
		class friendlyFire
		{
			displayName = $STR_A3_WL_FF_Hint_Name;
			displayNameShort = "";
			description = $STR_A3_WL_FF_Hint;
			tip = $STR_A3_WL_FF_Hint_01;
			arguments[] =
			{
				{{"TacticalPing"}},
				"name player",
				"format ['%1', (3 - (count (player getVariable ['BIS_WL_friendlyKillTimestamps', []])))]"
			};
			image = ;
			noImage = true;
		};
	};

	class voiceWarningSystem
	{
		displayName = "Rita Controls";

		class rita
		{
			displayName = "Rita voice warning system";
			displayNameShort = "";
			description = "In your scoll wheel options you can enable the %3voice warning system: Rita.%4%1%2 It'll give you %3terrain info%4, getting to low to the terrain or diving to fast will trigger alerts.%1%2 It'll also %3warn you%4 when you are %3visible on enemy sensors.%4%1";
			tip = "";
			image = "A3\ui_f\data\gui\cfg\hints\voice_ca.paa";
			noImage = false;
		};
		class betty
		{
			displayName = "Betty voice warning system";
			displayNameShort = "";
			description = "In your scoll wheel options you can enable the %3voice warning system: Betty.%4%1%2 It'll give you %3information about new enemies%4 on your sensor or when you lose sight of an enemy.%1%2 It'll also give you %3terrain info%4, getting to low to the terrain or diving to fast will trigger alerts.%1%2 Last but not least the system also %3warns you%4 when you are %3visible on enemy sensors.%4%1";
			tip = "";
			image = "A3\ui_f\data\gui\cfg\hints\voice_ca.paa";
			noImage = false;
		};
	};
};

class CfgDebriefing
{
	class BIS_WLVictoryGUER
	{
		title = $STR_A3_endgame_debriefing_victory;
		subtitle = $STR_A3_WL_game_over_victory;
		picture = "n_installation";
		pictureBackground = "\A3\Map_Altis\data\ui_Altis_ca.paa";
		pictureColor[] = {0.0,0.3,0.6,1};
	};
	class BIS_WLDefeatGUER
	{
		title = $STR_A3_endgame_debriefing_defeat;
		subtitle = $STR_A3_WL_game_over_loss;
		picture = "n_installation";
		pictureBackground = "\A3\Map_Altis\data\ui_Altis_ca.paa";
		pictureColor[] = {0,0.5,0,1};
	};
	class imbalance
	{
		title = $STR_A3_debriefing_imbalance_title;
		subtitle = $STR_A3_debriefing_imbalance_title;
		description = $STR_A3_debriefing_imbalance_desription;
		picture = "n_installation";
		pictureBackground = "img\wl_logo_ca.paa";
		pictureColor[] = {0,0,0,1};
	};
};